The ``0-add_integer`` module
============================

Using ``add_integer``
---------------------

Importing function from the module:
    >>> add_integer = __import__('0-add_integer').add_integer

Add 2 and 2
    >>> add_integer(1, 2)
    4

Add 10 and -2
    >>> add_integer(10, -2)
    8

Add 2 and 9
    >>> add_integer(2, 9)
    11

Add 10 and 2
	>>> add_integer(10, -2)
	8

Add an integer number and a string
    >>> add_integer(9, "String")
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

None
    >>> add_integer(None)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Add a letter and a number
    >>> add_integer('10', 1)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Add two letters
    >>> add_integer('a', 'b')
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Add a number and a empty list
    >>> add_integer(123, [])
    Traceback (most recent call last):
	      ...
    TypeError: b must be an integer

Add a tuple
    >>> add_integer((7, 1))
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer


Passing a string
    >>> add_integer("Hello")
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Add two float numbers
    >>> add_integer(2.9, 2.9)
    4

Add 98 and 1
    >>> add_integer(-1)
    97

Case Overflow:

    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case Overflow 2:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case NaN:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer